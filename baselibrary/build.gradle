apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
// 这里添加下面两行代码。
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion  rootProject.ext.android["compileSdkVersion"]
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

buildscript {
    repositories {
        jcenter()
    }
}
dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    annotationProcessor rootProject.ext.dependencies["glide-annotationProcessor"]
    //support
    api(rootProject.ext.dependencies["support-v4"]) {
        exclude module: 'support-annotations'
    }
    api(rootProject.ext.dependencies["appcompat-v7"]) {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    api(rootProject.ext.dependencies["design"]) {
        exclude module: 'support-annotations'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
    }
    api rootProject.ext.dependencies["annotations"]
    testApi rootProject.ext.dependencies["junit"]
    //test
    api rootProject.ext.dependencies["timber"]
    api rootProject.ext.dependencies["constraintlayout"]
    api rootProject.ext.dependencies["androideventbus"]
    api rootProject.ext.dependencies["gson"]
    api rootProject.ext.dependencies["glide"]
    api rootProject.ext.dependencies["glide-okhttp"]

    api(rootProject.ext.dependencies["butterknife"]) {
        exclude module: 'support-annotations'
    }
    //请求
    api rootProject.ext.dependencies["OkGo"]
    api rootProject.ext.dependencies["Okrx"]
    api  rootProject.ext.dependencies["okserver"]
    //错误状态
    api  rootProject.ext.dependencies["loadinglayout"]
   /* //首页tab
    compile  rootProject.ext.dependencies["flycoTabLayout"]*/
    //下拉刷新
    api rootProject.ext.dependencies["SmartRefreshLayout"]
    api rootProject.ext.dependencies["SmartRefreshHeader"]
    api rootProject.ext.dependencies["calligraphy"]
    //轮播图
    api rootProject.ext.dependencies["bga-banner"]

    api rootProject.ext.dependencies["marqueeview"]

    //通用控件
    //  api  rootProject.ext.dependencies["pluginwidget"]
    //multidexmultidex
    api rootProject.ext.dependencies['multidex']
    //兼容动画库
    api rootProject.ext.dependencies["nineoldandroids"]
    //通用控件库
    api('com.lyb.besttimer:pluginwidget:0.0.136') {
        exclude module: 'recyclerview-v7'
    }
    /* //友盟
     compile 'com.umeng.analytics:analytics:latest.integration'
 //    compile 'com.tencent.bugly:crashreport:latest.release'
     //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
     compile 'com.tencent.bugly:crashreport_upgrade:1.3.4'
     //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0*/
    //compile 'com.tencent.bugly:nativecrashreport:latest.release'
    api 'com.yqritc:recyclerview-flexibledivider:1.4.0'
    api 'com.orhanobut:logger:1.15'
    api('cn.qqtheme.framework:WheelPicker:1.5.1') {
        exclude group: 'com.android.support'
    }

    api 'com.trello.rxlifecycle2:rxlifecycle:2.2.0' //
    api 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.0'
    api 'com.trello.rxlifecycle2:rxlifecycle-components:2.0.1'

    //greendao依赖
    api 'org.greenrobot:greendao:3.2.2'
    api 'com.facebook.stetho:stetho:1.5.0'
    api 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    api 'top.zibin:Luban:1.1.3'
}

// 定义两个链接，下面会用到。
def siteUrl = 'https://coding.net/u/htjywl/p/BaseProject' // 项目主页。
def gitUrl = 'https://git.coding.net/htjywl/BaseProject.git' // Git仓库的url。
//gradlew clean bintrayUpload
group = "com.htjy.dwm"// 唯一包名,比如compile 'com.ansen.http:okhttpencapsulation:1.0.1'中的com.ansen.http就是这里配置的。gradlew clean
version = "1.5.14"//项目引用的版本号，比如compile 'com.ansen.http:okhttpencapsulation:1.0.1'中的1.0.1就是这里配置的。

install {
    repositories.mavenInstaller {
        // 生成pom.xml和参数
        pom {
            project {
                packaging 'aar'
                // 项目描述，复制我的话，这里需要修改。
                name 'baselibrary'// 可选，项目名称。
                description 'base library for HTJY Android Project'// 可选，项目描述。
                url siteUrl // 项目主页，这里是引用上面定义好。

                // 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                //填写开发者基本信息，复制我的，这里需要修改。
                developers {
                    developer {
                        id 'htjywl' // 开发者的id。
                        name 'htjywl' // 开发者名字。
                        email 'htjywl@163.com' // 开发者邮箱。
                    }
                }

                // SCM，复制我的，这里不需要修改。
                scm {
                    connection gitUrl // Git仓库地址。
                    developerConnection gitUrl // Git仓库地址。
                    url siteUrl // 项目主页。
                }
            }
        }
    }
}

// 生成jar包的task，不需要修改。
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

// 生成jarDoc的task，不需要修改。
task javadoc(type: Javadoc) {
    options.encoding = "utf-8"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // destinationDir = file("../javadoc/")
    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过。
}

// 生成javaDoc的jar，不需要修改。
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user") // Bintray的用户名。
    key = properties.getProperty("bintray.apikey") // Bintray刚才保存的ApiKey。

    configurations = ['archives']
    pkg {
        repo = "baselibrary"  //Repository名字 需要自己在bintray网站上先添加
        name = "baselib"
// 发布到Bintray上的项目名字，这里的名字不是compile 'com.ansen.library:circleimage:1.0.1'中的circleimage。
        userOrg = 'devindeng'//Bintray的组织id
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true // 是否是公开项目。
    }
}